package main

import (
	"bufio"
	"context"
	"fmt"
	"os"
	"strconv"
	"strings"
	"testing"
	"unicode"

	"6.824/mr"
	"6.824/utils"

	. "github.com/onsi/ginkgo/v2"
	. "github.com/onsi/gomega"
)

func TestWorker(t *testing.T) {
	RegisterFailHandler(Fail)
	RunSpecs(t, "Worker")
}

func getTestFileNames() []string {
	return []string{}
}

var _ = Describe("LocalWorker", func() {
	var (
		localWorker *mr.Worker
		coor        *mr.Coordinator
		// FIXME: Should be full pg-*.txt file, or the answer will not be correct
		fileNames []string = []string{"pg-being_ernest.txt", "pg-grimm.txt"}
		workDir   string
	)
	const (
		nReduce = 10
	)
	BeforeEach(func() {
		workDir = utils.GetWd()
		coor = mr.NewLocalCoordinator(fileNames, nReduce)
		fileNames = getTestFileNames()
		localWorker = mr.NewLocalWorker(coor.MailBox, Map, Reduce, nReduce, workDir)
		go localWorker.Serve(context.Background())
	})

	AfterEach(func() {
		localWorker.Shutdown()
	})

	When("worker ask coordinator for jobs", func() {
		var (
			req   *mr.WordCountArgs
			reply *mr.WordCountReply
			err   error
		)
		BeforeEach(func() {
			req = &mr.WordCountArgs{FileNames: fileNames}
			reply = &mr.WordCountReply{}
			err = coor.WordCount(req, reply)
			Expect(err).ShouldNot(HaveOccurred())
			coor.WaitForReduce()
		})
		It("should return correct jobs", func() {
			Expect(err).ShouldNot(HaveOccurred())
			// Open mr-out-Y, and compare to correct answer
			Expect(collectKvMap(
				_map(
					genOutputFileNamesByNReduce(nReduce), func(fileName string) kvMap {
						return mustParseResultFile(fileName)
					})...,
			)).To(Equal(mustParseResultFile("mr-out-correct")))
		})
	})
})

func _map(fileNames []string, fn func(fileName string) kvMap) []kvMap {
	out := make([]kvMap, 0, len(fileNames))
	for _, fName := range fileNames {
		out = append(out, fn(fName))
	}
	return out
}

// Copied from mrapps/wc.go
//
// The map function is called once for each file of input. The first
// argument is the name of the input file, and the second is the
// file's complete contents. You should ignore the input file name,
// and look only at the contents argument. The return value is a slice
// of key/value pairs.
func Map(filename string, contents string) []mr.KeyValue {
	// function to detect word separators.
	ff := func(r rune) bool { return !unicode.IsLetter(r) }

	// split contents into an array of words.
	words := strings.FieldsFunc(contents, ff)

	kva := []mr.KeyValue{}
	for _, w := range words {
		kv := mr.KeyValue{w, "1"}
		kva = append(kva, kv)
	}
	return kva
}

// The reduce function is called once for each key generated by the
// map tasks, with a list of all the values created for that key by
// any map task.
func Reduce(key string, values []string) string {
	// return the number of occurrences of this word.
	return strconv.Itoa(len(values))
}

func getwd() string {
	dir, err := os.Getwd()
	must(err)
	return dir
}

var _ = Describe("parseResultFile", func() {
	When("test file is written", func() {
		var (
			f   *os.File
			out kvMap
			err error
		)
		BeforeEach(func() {
			fileName := "file.txt"
			f, err = os.Create(fileName)
			Expect(err).ShouldNot(HaveOccurred())
			fmt.Fprint(f, dummy)
			f.Close()

			out, err = parseResultFile(fileName)
			Expect(err).ShouldNot(HaveOccurred())
		})
		It("should return right result", func() {
			want := kvMap{
				"A":       {"A", "509"},
				"ABOUT":   {"ABOUT", "2"},
				"ACT":     {"ACT", "8"},
				"ACTRESS": {"ACTRESS", "1"},
			}
			Expect(out).To(Equal(want))
		})
	})

})

type kvMap map[string]mr.KeyValue

func genOutputFileNamesByNReduce(nReduce int) []string {
	out := make([]string, 0, nReduce)
	for i := 0; i < nReduce; i++ {
		// TODO: Don't hard code filename
		out = append(out, fmt.Sprintf("mr-out-%d", i))
	}
	return out
}

func collectKvMap(maps ...kvMap) kvMap {
	out := kvMap{}
	for _, m := range maps {
		for k, v := range m {
			if _v, ok := out[k]; !ok {
				// k not exist in out, add it
				out[k] = v
			} else {
				// k exists in out, merge them together
				out[k] = mr.KeyValue{Key: k, Value: v.Value + _v.Value}
			}
		}
	}
	return out
}

func mustParseResultFile(fileName string) kvMap {
	m, err := parseResultFile(fileName)
	must(err)
	return m
}

func parseResultFile(fileName string) (kvMap, error) {
	f, err := os.Open(fileName)
	if err != nil {
		return nil, err
	}

	out := kvMap{}
	scanner := bufio.NewScanner(f)
	for scanner.Scan() {
		line := scanner.Text()
		kvPair := strings.Split(line, " ")
		if len(kvPair) != 2 {
			continue
		}
		key := kvPair[0]
		value := kvPair[1]
		out[key] = mr.KeyValue{Key: key, Value: value}
	}
	if err := scanner.Err(); err != nil {
		return nil, fmt.Errorf("reading standard input: %v", err)
	}
	return out, nil
}

func must(err error) {
	if err != nil {
		panic(err)
	}
}

const dummy = `
A 509
ABOUT 2
ACT 8
ACTRESS 1
`

// writeToFile(prepareDummy())
