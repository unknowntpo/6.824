package main

import (
	"context"
	"strconv"
	"strings"
	"testing"
	"unicode"

	"6.824/mr"
	. "github.com/onsi/ginkgo/v2"
	. "github.com/onsi/gomega"
)

func TestWorker(t *testing.T) {
	RegisterFailHandler(Fail)
	RunSpecs(t, "Worker")
}

var _ = Describe("LocalWorker", func() {
	var (
		localWorker mr.Worker
		coor        *mr.Coordinator
		fileNames   []string = []string{"pg-being_ernest.txt", "pg-grimm.txt"}
	)
	const (
		nReduce = 10
	)
	BeforeEach(func() {
		coor = mr.NewLocalCoordinator(fileNames, nReduce)
		localWorker = mr.NewLocalWorker(coor.MailBox, Map, Reduce, nReduce)
		go localWorker.Serve(context.Background())
	})

	AfterEach(func() {
		localWorker.Shutdown()
	})

	When("worker ask coordinator for jobs", func() {
		var (
			req   *mr.WordCountArgs
			reply *mr.WordCountReply
			err   error
		)
		BeforeEach(func() {
			req = &mr.WordCountArgs{FileNames: fileNames}
			reply = &mr.WordCountReply{}
			err = coor.WordCount(req, reply)
			Expect(err).ShouldNot(HaveOccurred())
			coor.WaitForReduce()
		})
		It("should return correct jobs", func() {
			Expect(err).ShouldNot(HaveOccurred())
			Expect(req.X + 1).To(Equal(reply.Y))
		})
	})
})

// Copied from mrapps/wc.go
//
// The map function is called once for each file of input. The first
// argument is the name of the input file, and the second is the
// file's complete contents. You should ignore the input file name,
// and look only at the contents argument. The return value is a slice
// of key/value pairs.
func Map(filename string, contents string) []mr.KeyValue {
	// function to detect word separators.
	ff := func(r rune) bool { return !unicode.IsLetter(r) }

	// split contents into an array of words.
	words := strings.FieldsFunc(contents, ff)

	kva := []mr.KeyValue{}
	for _, w := range words {
		kv := mr.KeyValue{w, "1"}
		kva = append(kva, kv)
	}
	return kva
}

// The reduce function is called once for each key generated by the
// map tasks, with a list of all the values created for that key by
// any map task.
func Reduce(key string, values []string) string {
	// return the number of occurrences of this word.
	return strconv.Itoa(len(values))
}
