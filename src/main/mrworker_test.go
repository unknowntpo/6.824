package main

import (
	"bufio"
	"context"
	"fmt"
	"os"
	"strconv"
	"strings"
	"testing"
	"unicode"

	"6.824/mr"
	. "github.com/onsi/ginkgo/v2"
	. "github.com/onsi/gomega"
)

func TestWorker(t *testing.T) {
	RegisterFailHandler(Fail)
	RunSpecs(t, "Worker")
}

var _ = Describe("LocalWorker", func() {
	var (
		localWorker *mr.Worker
		coor        *mr.Coordinator
		fileNames   []string = []string{"pg-being_ernest.txt", "pg-grimm.txt"}
	)
	const (
		nReduce = 10
	)
	BeforeEach(func() {
		coor = mr.NewLocalCoordinator(fileNames, nReduce)
		localWorker = mr.NewLocalWorker(coor.MailBox, Map, Reduce, nReduce)
		go localWorker.Serve(context.Background())
	})

	AfterEach(func() {
		localWorker.Shutdown()
	})

	When("worker ask coordinator for jobs", func() {
		var (
			req   *mr.WordCountArgs
			reply *mr.WordCountReply
			err   error
		)
		BeforeEach(func() {
			req = &mr.WordCountArgs{FileNames: fileNames}
			reply = &mr.WordCountReply{}
			err = coor.WordCount(req, reply)
			Expect(err).ShouldNot(HaveOccurred())
			coor.WaitForReduce()
		})
		It("should return correct jobs", func() {
			Expect(err).ShouldNot(HaveOccurred())
			Expect(req.X + 1).To(Equal(reply.Y))
			// Open mr-out-Y, and compare to correct answer
		})
	})
})

// Copied from mrapps/wc.go
//
// The map function is called once for each file of input. The first
// argument is the name of the input file, and the second is the
// file's complete contents. You should ignore the input file name,
// and look only at the contents argument. The return value is a slice
// of key/value pairs.
func Map(filename string, contents string) []mr.KeyValue {
	// function to detect word separators.
	ff := func(r rune) bool { return !unicode.IsLetter(r) }

	// split contents into an array of words.
	words := strings.FieldsFunc(contents, ff)

	kva := []mr.KeyValue{}
	for _, w := range words {
		kv := mr.KeyValue{w, "1"}
		kva = append(kva, kv)
	}
	return kva
}

// The reduce function is called once for each key generated by the
// map tasks, with a list of all the values created for that key by
// any map task.
func Reduce(key string, values []string) string {
	// return the number of occurrences of this word.
	return strconv.Itoa(len(values))
}

var _ = Describe("pareFile", func() {
	When("test file is written", func() {
		var (
			f   *os.File
			out kvMap
		)
		BeforeEach(func() {
			f = writeToFile(prepareDummy())
			out = parseResultFile(f)
		})
		It("should return right result", func() {
			want := kvMap{
				"A":       {"A", "509"},
				"ABOUT":   {"ABOUT", "2"},
				"ACT":     {"ACT", "8"},
				"ACTRESS": {"ACTRESS", "1"},
			}
			Expect(out).To(Equal(want))
		})
	})

})

type kvMap map[string]mr.KeyValue

func parseResultFile(f *os.File) kvMap {
	out := kvMap{}
	scanner := bufio.NewScanner(f)
	for scanner.Scan() {
		line := scanner.Text()
		kvPair := strings.Split(line, " ")
		if len(kvPair) != 2 {
			panic(fmt.Sprintf("wrong format, got %v, want <key> <value>", kvPair))
		}
		key := kvPair[0]
		value := kvPair[1]
		out[key] = mr.KeyValue{Key: key, Value: value}
	}
	fmt.Println(">>>>>got", out)
	return out
}

func writeToFile(b []byte) *os.File {
	file, err := os.Create("file.txt")
	must(err)
	_, err = file.Write(b)
	must(err)
	return file
}

func must(err error) {
	if err != nil {
		panic(err)
	}

}

// helper
func prepareDummy() []byte {
	return []byte(dummy)
}

const dummy = `
A 509
ABOUT 2
ACT 8
ACTRESS 1
`

// writeToFile(prepareDummy())
